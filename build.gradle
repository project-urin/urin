/*
 * Copyright 2022 Mark Slater
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'signing'
    id 'maven-publish'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.14'
    id 'org.hidetake.ssh' version '2.11.2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.gitlab.svg2ico' version '0.14'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
}

repositories {
    mavenCentral()
}

final def documentationDirectory = new File(project.buildDir, 'documentation')

sourceSets {
    documentation
}

testSets {
    libraries { testInfrastructure }
    testUnit {imports libraries.testInfrastructure }
    testIntegration {imports libraries.testInfrastructure }
}

tasks.named('check') {
    dependsOn(testIntegration)
}

dependencies {
    testInfrastructureImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    testInfrastructureImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    testUnitImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version :'5.9.1'

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.1'

    documentationImplementation sourceSets.main.output
    documentationImplementation group: 'net.sourceforge.writexml', name: 'writexml', version: '1.3'
    documentationImplementation group: 'net.sourceforge.xazzle', name: 'xazzle', version: '0.39'

    spotbugs group: 'com.github.spotbugs', name: 'spotbugs', version: '4.7.3'
}

group = 'net.sourceforge.urin'
archivesBaseName = 'urin'
version = "${majorVersion}.${minorVersion}"
description = 'Urin is an open source URI generator and parser written in Java.'

modularity.mixedJavaRelease 8

tasks.register('compileTinyJava', JavaCompile) {
    source sourceSets.main.allSource
    classpath = sourceSets.main.compileClasspath
    destinationDirectory.set(file("${project.buildDir}/tiny-classes/main"))
    options.compilerArgs = ['-g:none']
}

tasks.register('myJavadoc', Javadoc) {
    source = sourceSets.main.allJava
    title = "Urin version ${version}"
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set 'javadoc'
    from myJavadoc
}

tasks.register('tinyJar', Jar) {
    dependsOn compileTinyJava
    archiveClassifier.set 'tiny'
    from file("${project.buildDir}/tiny-classes/main")
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE) // because org.javamodularity.moduleplugin half-applies to this: it tries to add module-info.class it compiled separately in addition to the one compiled by the compileTinyJar task.
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

tasks.register('combinedJar', Jar) {
    archiveClassifier.set 'combined'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

pmd {
    toolVersion = '6.51.0'
    ruleSetFiles = files('tools/pmd-ruleset.xml')
    ruleSets = []
}

pmdMain {
    ruleSetFiles = files('tools/pmd-ruleset.xml', 'tools/pmd-main-extra-ruleset.xml')
    ruleSets = []
}

artifacts {
    archives javadocJar, sourcesJar
}

tasks.register('ico', Svg2IcoTask) {
    destination = new File(documentationDirectory, 'favicon.ico')
    input {
        source = file('resources/favicon.svg')
        width = 32
        height = 32
    }
}

tasks.register('png', Svg2PngTask) {
    source = file('resources/favicon.svg')
    destination = file("${project.buildDir}/icons/favicon.png")
    width = 128
    height = 128
}


tasks.register('buildDocumentation', JavaExec) {
    outputs.dir(documentationDirectory)
    mainClass = 'documentation.DocumentationGenerator'
    args(documentationDirectory.toString())
    classpath = sourceSets.documentation.runtimeClasspath
}

tasks.register('documentationJar', Tar) {
    dependsOn buildDocumentation, ico
    from documentationDirectory
    from 'docs'
    archiveBaseName.set('documentation')
    compression = Compression.GZIP
}

remotes {
    sourceforgeShell {
        host = 'shell.sourceforge.net'
        user = "$sourceforgeUser,urin"
        password = "$sourceforgePassword"

    }
    sourceforgeWeb {
        host = 'web.sourceforge.net'
        user = "$sourceforgeUser,urin"
        password = "$sourceforgePassword"

    }
}

tasks.register('copyToSourceforge') {
    dependsOn jar, documentationJar, javadocJar, combinedJar, tinyJar
    doLast {
        ssh.runInOrder {
            session(remotes.sourceforgeShell) {
                execute 'create'
                execute "mkdir -p /home/frs/project/urin/${version}"
            }
            session(remotes.sourceforgeWeb) {
                put from: "${project.buildDir}/distributions/documentation-${version}.tgz", into: '/home/project-web/urin/'
                put from: "${project.buildDir}/libs/urin-${version}-javadoc.jar", into: '/home/project-web/urin/'
                put from: "${project.buildDir}/libs/urin-${version}-combined.jar", into: "/home/frs/project/urin/${version}/urin-${version}.jar"
                put from: "${project.buildDir}/libs/urin-${version}-tiny.jar", into: "/home/frs/project/urin/${version}/urin-small-${version}.jar"
            }
            session(remotes.sourceforgeShell) {
                execute "mkdir -p /home/project-web/urin/${version}/javadoc && tar -xvf /home/project-web/urin/documentation-${version}.tgz -C /home/project-web/urin/${version} && unzip -d /home/project-web/urin/${version}/javadoc /home/project-web/urin/urin-${version}-javadoc.jar && rm /home/project-web/urin/documentation-${version}.tgz && rm /home/project-web/urin/urin-${version}-javadoc.jar && rm /home/project-web/urin/htdocs ; ln -s /home/project-web/urin/${version} /home/project-web/urin/htdocs"
            }
        }
    }
}

tasks.register('updateSourceforgeDefaultDownload') {
    it.doLast {
        def response = HttpClient.newHttpClient()
                .send(
                        HttpRequest.newBuilder(URI.create("https://sourceforge.net/projects/urin/files/${version}//urin-${version}.jar"))
                                .PUT(HttpRequest.BodyPublishers.ofString("default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others&download_label=${version}%20with%20source&api_key=$sourceforgeApiKey"))
                                .setHeader("content-type", "application/x-www-form-urlencoded")
                                .build(),
                        HttpResponse.BodyHandlers.ofString()
                )
        if (response.statusCode() < 200 || response.statusCode() >= 400) {
            throw new GradleException("updating SourceForge default download resulted in response code ${response.statusCode()} with body\n${response.body()}")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(sourcesJar)
            artifact(javadocJar)
            from components.java
            pom {
                name = 'Urin'
                description = project.description
                url = 'http://urin.sourceforge.net'
                scm {
                    url = 'git://git.code.sf.net/p/urin/code'
                }
                developers {
                    developer {
                        id = 'mos20'
                        name = 'Mark Slater'
                    }
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype {
            // stagingProfileId = '12462889504a1e'
            username = project.findProperty('ossrhUser')
            password = project.findProperty('ossrhPassword')
        }
    }
}

tasks.register('performRelease') {
    dependsOn clean, build, publishToSonatype, copyToSourceforge, png, closeAndReleaseStagingRepository, updateSourceforgeDefaultDownload
    doLast {
        println 'Release complete :)'
    }
}

tasks.register('buildAndDeployCleanVersion') {
    dependsOn clean, performRelease
}

tasks.register('incrementVersionNumber') {
    dependsOn buildAndDeployCleanVersion
    doLast {
        ant.propertyfile(file: file('gradle.properties')) {
            entry(key: 'minorVersion', type: 'int', operation: '+', value: 1)
        }
    }
}

tasks.register('deploy') {
    dependsOn incrementVersionNumber
}

updateSourceforgeDefaultDownload.mustRunAfter copyToSourceforge
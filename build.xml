<!--
  ~ Copyright 2011 Mark Slater
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
  ~
  ~ 	http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
  -->

<project name="urin" default="compile">

    <description>
        Urin build file
    </description>

    <property name="location.lib" value="lib"/>
    <property name="location.documentation" value="docs"/>
    <property name="location.src" value="src/main"/>
    <property name="location.src.documentation" value="src/documentation"/>
    <property name="location.src.test" value="src/test"/>

    <property name="location.build" value="build"/>
    <property name="location.classes" value="${location.build}/classes"/>
    <property name="location.documentationclasses" value="${location.build}/documentation-classes"/>
    <property name="location.optimisedclasses" value="${location.build}/optimised-classes"/>
    <property name="location.testclasses" value="${location.build}/test-classes"/>
    <property name="location.testresults" value="${location.build}/test-results"/>

    <property name="location.dist" value="${location.build}/dist"/>

    <path id="all-libs">
        <fileset dir="${location.lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="test-compile-libs">
        <fileset dir="${location.lib}/test/compile">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!--<taskdef resource="org/eclipse/jgit/ant/ant-tasks.properties">-->
    <!--<classpath>-->
    <!--<pathelement location="${location.lib}/build/org.eclipse.jgit-1.1.0.201109151100-r"/>-->
    <!--<pathelement-->
    <!--location="${location.lib}/build/org.eclipse.jgit.ant-1.0.99.0.7-UNOFFICIAL-ROBERTO-RELEASE.jar"/>-->
    <!--&lt;!&ndash;<pathelement location="${location.lib}/build/jsch-0.1.24.jar"/>&ndash;&gt;-->
    <!--<pathelement location="${location.lib}/build/jsch-0.1.44.jar"/>-->
    <!--</classpath>-->
    <!--</taskdef>-->

    <target name="compile" description="compiles all classes">
        <echo message="Starting compile"/>
        <delete dir="${location.classes}"/>
        <mkdir dir="${location.classes}"/>
        <delete dir="${location.documentationclasses}"/>
        <mkdir dir="${location.documentationclasses}"/>
        <delete dir="${location.optimisedclasses}"/>
        <mkdir dir="${location.optimisedclasses}"/>
        <delete dir="${location.testclasses}"/>
        <mkdir dir="${location.testclasses}"/>

        <javac destdir="${location.classes}" debug="on" source="1.6" target="1.6" includeantruntime="false">
            <src path="${location.src}"/>
        </javac>

        <javac destdir="${location.optimisedclasses}" debug="on" optimize="true" source="1.6" target="1.6"
               includeantruntime="false">
            <src path="${location.src}"/>
        </javac>

        <javac destdir="${location.documentationclasses}" debug="on" source="1.6" target="1.6"
               includeantruntime="false">
            <src path="${location.src.documentation}"/>
            <classpath location="${location.classes}"/>
        </javac>

        <javac destdir="${location.testclasses}" debug="on" source="1.6" target="1.6" includeantruntime="false">
            <src path="${location.src.test}"/>
            <classpath location="${location.classes}"/>
            <classpath refid="test-compile-libs"/>
        </javac>

        <copy todir="${location.classes}">
            <fileset dir="src/main"/>
        </copy>

        <copy todir="${location.testclasses}">
            <fileset dir="src/test"/>
        </copy>

        <echo message="Finished compile"/>
    </target>

    <target name="test" depends="test-unit" description="builds and runs all tests"/>

    <target name="test-unit" depends="compile" description="builds and runs unit tests">
        <delete dir="${location.testresults}"/>
        <mkdir dir="${location.testresults}"/>
        <junit printsummary="yes" errorproperty="unittestfailure" failureproperty="unittestfailure">
            <classpath>
                <pathelement location="${location.testclasses}"/>
                <pathelement location="${location.classes}"/>
                <path refid="test-compile-libs"/>
            </classpath>
            <batchtest fork="yes" todir="${location.testresults}">
                <fileset dir="${location.testclasses}">
                    <include name="**/*Test.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>

        <junitreport todir="${location.testresults}">
            <fileset dir="${location.testresults}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${location.testresults}"/>
        </junitreport>

        <fail if="unittestfailure" message="Unit tests failed."/>
    </target>

    <target name="documentation">
        <property name="location.dist.documentation" value="${location.dist}/documentation/${version}"/>
        <mkdir dir="${location.dist.documentation}"/>
        <copy todir="${location.dist.documentation}">
            <fileset dir="${location.documentation}" excludes="**/*.html"/>
        </copy>
        <java classname="org.sourceforge.urin.IndexPage" failonerror="true" fork="true">
            <arg value="${location.dist}/documentation/${version}"/>
            <classpath>
                <pathelement path="${location.classes}"/>
                <pathelement path="${location.documentationclasses}"/>
            </classpath>
        </java>
        <mkdir dir="${location.dist.documentation}/javadoc"/>
        <javadoc destdir="${location.dist.documentation}/javadoc" windowtitle="Urin version ${version}"
                 doctitle="Urin version ${version}">
            <sourcepath path="${location.src}"/>
        </javadoc>
    </target>

    <target name="development-version" unless="release">
        <property file="version.properties"/>
        <tstamp>
            <format property="timestamp" pattern="yyyyMMddHHmm" locale="en" timezone="UTC"/>
        </tstamp>
        <property name="version" value="${urin.version.major}.${urin.version.minor}-${timestamp}"/>
    </target>

    <target name="release-version" if="release">
        <property file="version.properties"/>
        <property name="version" value="${urin.version.major}.${urin.version.minor}"/>
    </target>

    <target name="determine-version" depends="development-version, release-version">
        <echo message="Version for build is: ${version}"/>
    </target>

    <target name="distribute" depends="compile, test, determine-version">
        <echo message="Creating release structure"/>
        <property name="location.dist.binaries" value="${location.dist}/binaries/${version}"/>
        <delete dir="${location.dist}"/>
        <mkdir dir="${location.dist.binaries}"/>

        <antcall target="documentation"/>
        <jar basedir="${location.classes}" destfile="${location.dist.binaries}/urin-${version}.jar"/>
        <jar basedir="${location.optimisedclasses}"
             destfile="${location.dist.binaries}/urin-small-${version}.jar"/>
    </target>

    <target name="prepare-release" description="Builds an offical release locally">
        <property name="release" value="true"/>
        <antcall target="distribute"/>
    </target>

    <target name="distribute-release" description="Does a real release">
        <input addproperty="ssh.username" message="SSH username"/>
        <input addproperty="ssh.password" message="SSH password"/>
        <!--TODO get code revision of trunk -->
        <property name="release.revision" value="${git.info.rev}"/>
        <echo message="Attempting to release revison ${release.revision}"/>
        <property name="release.directory" value="${location.build}/release/${release.revision}"/>
        <delete dir="${location.build}"/>
        <!--TODO export trunk -->
        <subant target="prepare-release" buildpath="${release.directory}"/>
        <property file="${release.directory}/version.properties"/>
        <property name="version" value="${urin.version.major}.${urin.version.minor}"/>
        <!--TODO tag release revision -->
        <sshexec host="shell.sourceforge.net" username="${ssh.username},urin" password="${ssh.password}"
                 command="create" trust="true"/>
        <scp todir="${ssh.username},urin@web.sourceforge.net:/home/project-web/urin/"
             password="${ssh.password}" trust="true">
            <fileset dir="${release.directory}/build/dist/documentation/"/>
        </scp>
        <scp todir="${ssh.username},urin@web.sourceforge.net:/home/frs/project/u/ur/urin/"
             password="${ssh.password}" trust="true">
            <fileset dir="${release.directory}/build/dist/binaries/"/>
        </scp>
        <sshexec host="shell.sourceforge.net" username="${ssh.username},urin" password="${ssh.password}"
                 command="rm /home/project-web/urin/htdocs ; ln -s /home/project-web/urin/${version} /home/project-web/urin/htdocs"
                 trust="true"/>
        <propertyfile file="version.properties">
            <entry key="urin.version.minor" type="int" default="0" operation="+"/>
        </propertyfile>
        <!--TODO commit post-release version.properties -->
    </target>

</project>